#!/usr/bin/env python
PACKAGE = "qrotor_ground"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()
# traj_enum = gen.enum([gen.const("Translate",    int_t, 0, "a translate"),
#                        gen.const("Rotate",        int_t, 1, "rotate")],
#                      "Enum to set trajectory mode")
# gen.add("mode", int_t, 0, "A trajectory mode usign enum", 1, 0, 3, edit_method=traj_enum)

translate = gen.add_group("Translate")
translate.add("x", double_t, 0, "x in meters", 0, -2, 2)
translate.add("y", double_t, 0, "y in meters", 0, -2, 2)
translate.add("z", double_t, 0, "z in meters", 1, -2, 2)

other = gen.add_group("Other")
gen.add("distance", double_t, 0, "distance in meters", 0., 0.5, 2)
gen.add("yaw", double_t, 0, "yaw in degrees", 0., -180, 180)

gen.add("set", bool_t, 0, "Set Command", False)

gen.add("set_offboard", bool_t, 0, "Set Offboard", False)
# gen.add("send_cmds", bool_t, 0, "Send Offboard Thrust Commands", False)

mission = gen.add_group("Mission")
mission.add("takeoff", bool_t, 0, "take_off_all", False)
mission.add("landall", bool_t, 0, "land_all", False)
mission.add("killall", bool_t, 0, "kill_all", False)
mission.add("activate_mission", bool_t, 0, "start and stop mission", False)
mission.add("kill_mission", bool_t, 0, "start and stop mission", False)

exit(gen.generate(PACKAGE, "qrotor_ground", "MultiDroneManager"))