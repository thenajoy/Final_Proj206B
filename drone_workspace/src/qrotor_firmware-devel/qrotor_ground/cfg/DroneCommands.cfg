#!/usr/bin/env python
PACKAGE = "qrotor_ground"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()
mode_enum = gen.enum([gen.const("Move", int_t, 0, "Move drone by"),
                        gen.const("Setpoint", int_t, 1, "Move drone to setpoint")],
                        "Command setpoint to drone")
gen.add("mode", int_t, 0, "A drone command mode", 0, 0, 1, edit_method=mode_enum)
gen.add("x", double_t, 0, "x in meters", 0., -2, 2)
gen.add("y", double_t, 0, "y in meters", 0., -2, 2)
gen.add("z", double_t, 0, "z in meters", 0., -2, 3)
gen.add("yaw", double_t, 0, "yaw in degrees", 0, -180, 180)
gen.add("send", bool_t, 0, "Send Command", False)

cmds = gen.add_group("CMDs", type="tab")
cmds.add("kill", bool_t, 0, "Send Kill Command", False)
cmds.add("arm", bool_t, 0, "Send Arm Command", False)
cmds.add("disarm", bool_t, 0, "Send Disrm Command", False)
cmds.add("takeoff", bool_t, 0, "Send takeoff Command", False)
cmds.add("land", bool_t, 0, "Send land Command", False)
cmds.add("OFFBOARD", bool_t, 0, "Set OFFBOARD CONTROL MODE", False)
gen.add("activate_mission", bool_t, 0, "Send activate mission Command", False)
gen.add("kill_mission", bool_t, 0, "Send kill mission Command", False)
# gen.add("send_offboard_cmds", bool_t, 0, "Send offboard cmds", False)

exit(gen.generate(PACKAGE, "qrotor_ground", "DroneCommands"))