# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from qrotor_firmware/FlatTrajectoryRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class FlatTrajectoryRequest(genpy.Message):
  _md5sum = "15191a9c73b67809e5b2cf4690babc5b"
  _type = "qrotor_firmware/FlatTrajectoryRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# set Trajectory type
uint8 TRAJECTORY_STRAIGHT_LINE = 0
uint8 TRAJECTORY_CIRCLE_2D = 1
uint8 TRAJECTORY_CIRCLE_3D = 2
uint8 TRAJECTORY_ELLIPSE_2D = 3
uint8 TRAJECTORY_ELLIPSE_3D = 4

uint8 type
geometry_msgs/Vector3 center
geometry_msgs/Vector3 radius
geometry_msgs/Vector3 phase

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z"""
  # Pseudo-constants
  TRAJECTORY_STRAIGHT_LINE = 0
  TRAJECTORY_CIRCLE_2D = 1
  TRAJECTORY_CIRCLE_3D = 2
  TRAJECTORY_ELLIPSE_2D = 3
  TRAJECTORY_ELLIPSE_3D = 4

  __slots__ = ['type','center','radius','phase']
  _slot_types = ['uint8','geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Vector3']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       type,center,radius,phase

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(FlatTrajectoryRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.type is None:
        self.type = 0
      if self.center is None:
        self.center = geometry_msgs.msg.Vector3()
      if self.radius is None:
        self.radius = geometry_msgs.msg.Vector3()
      if self.phase is None:
        self.phase = geometry_msgs.msg.Vector3()
    else:
      self.type = 0
      self.center = geometry_msgs.msg.Vector3()
      self.radius = geometry_msgs.msg.Vector3()
      self.phase = geometry_msgs.msg.Vector3()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_B9d().pack(_x.type, _x.center.x, _x.center.y, _x.center.z, _x.radius.x, _x.radius.y, _x.radius.z, _x.phase.x, _x.phase.y, _x.phase.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.center is None:
        self.center = geometry_msgs.msg.Vector3()
      if self.radius is None:
        self.radius = geometry_msgs.msg.Vector3()
      if self.phase is None:
        self.phase = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 73
      (_x.type, _x.center.x, _x.center.y, _x.center.z, _x.radius.x, _x.radius.y, _x.radius.z, _x.phase.x, _x.phase.y, _x.phase.z,) = _get_struct_B9d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_B9d().pack(_x.type, _x.center.x, _x.center.y, _x.center.z, _x.radius.x, _x.radius.y, _x.radius.z, _x.phase.x, _x.phase.y, _x.phase.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.center is None:
        self.center = geometry_msgs.msg.Vector3()
      if self.radius is None:
        self.radius = geometry_msgs.msg.Vector3()
      if self.phase is None:
        self.phase = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 73
      (_x.type, _x.center.x, _x.center.y, _x.center.z, _x.radius.x, _x.radius.y, _x.radius.z, _x.phase.x, _x.phase.y, _x.phase.z,) = _get_struct_B9d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B9d = None
def _get_struct_B9d():
    global _struct_B9d
    if _struct_B9d is None:
        _struct_B9d = struct.Struct("<B9d")
    return _struct_B9d
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from qrotor_firmware/FlatTrajectoryResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class FlatTrajectoryResponse(genpy.Message):
  _md5sum = "358e233cde0c8a8bcfea4ce193f8fc15"
  _type = "qrotor_firmware/FlatTrajectoryResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool success
"""
  __slots__ = ['success']
  _slot_types = ['bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       success

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(FlatTrajectoryResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.success is None:
        self.success = False
    else:
      self.success = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.success
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.success,) = _get_struct_B().unpack(str[start:end])
      self.success = bool(self.success)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.success
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.success,) = _get_struct_B().unpack(str[start:end])
      self.success = bool(self.success)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
class FlatTrajectory(object):
  _type          = 'qrotor_firmware/FlatTrajectory'
  _md5sum = 'df0bac3bd179de8433b17a584a39b688'
  _request_class  = FlatTrajectoryRequest
  _response_class = FlatTrajectoryResponse
