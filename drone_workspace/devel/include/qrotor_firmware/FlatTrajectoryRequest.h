// Generated by gencpp from file qrotor_firmware/FlatTrajectoryRequest.msg
// DO NOT EDIT!


#ifndef QROTOR_FIRMWARE_MESSAGE_FLATTRAJECTORYREQUEST_H
#define QROTOR_FIRMWARE_MESSAGE_FLATTRAJECTORYREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>

namespace qrotor_firmware
{
template <class ContainerAllocator>
struct FlatTrajectoryRequest_
{
  typedef FlatTrajectoryRequest_<ContainerAllocator> Type;

  FlatTrajectoryRequest_()
    : type(0)
    , center()
    , radius()
    , phase()  {
    }
  FlatTrajectoryRequest_(const ContainerAllocator& _alloc)
    : type(0)
    , center(_alloc)
    , radius(_alloc)
    , phase(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _type_type;
  _type_type type;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _center_type;
  _center_type center;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _radius_type;
  _radius_type radius;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _phase_type;
  _phase_type phase;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(TRAJECTORY_STRAIGHT_LINE)
  #undef TRAJECTORY_STRAIGHT_LINE
#endif
#if defined(_WIN32) && defined(TRAJECTORY_CIRCLE_2D)
  #undef TRAJECTORY_CIRCLE_2D
#endif
#if defined(_WIN32) && defined(TRAJECTORY_CIRCLE_3D)
  #undef TRAJECTORY_CIRCLE_3D
#endif
#if defined(_WIN32) && defined(TRAJECTORY_ELLIPSE_2D)
  #undef TRAJECTORY_ELLIPSE_2D
#endif
#if defined(_WIN32) && defined(TRAJECTORY_ELLIPSE_3D)
  #undef TRAJECTORY_ELLIPSE_3D
#endif

  enum {
    TRAJECTORY_STRAIGHT_LINE = 0u,
    TRAJECTORY_CIRCLE_2D = 1u,
    TRAJECTORY_CIRCLE_3D = 2u,
    TRAJECTORY_ELLIPSE_2D = 3u,
    TRAJECTORY_ELLIPSE_3D = 4u,
  };


  typedef boost::shared_ptr< ::qrotor_firmware::FlatTrajectoryRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::qrotor_firmware::FlatTrajectoryRequest_<ContainerAllocator> const> ConstPtr;

}; // struct FlatTrajectoryRequest_

typedef ::qrotor_firmware::FlatTrajectoryRequest_<std::allocator<void> > FlatTrajectoryRequest;

typedef boost::shared_ptr< ::qrotor_firmware::FlatTrajectoryRequest > FlatTrajectoryRequestPtr;
typedef boost::shared_ptr< ::qrotor_firmware::FlatTrajectoryRequest const> FlatTrajectoryRequestConstPtr;

// constants requiring out of line definition

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::qrotor_firmware::FlatTrajectoryRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::qrotor_firmware::FlatTrajectoryRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::qrotor_firmware::FlatTrajectoryRequest_<ContainerAllocator1> & lhs, const ::qrotor_firmware::FlatTrajectoryRequest_<ContainerAllocator2> & rhs)
{
  return lhs.type == rhs.type &&
    lhs.center == rhs.center &&
    lhs.radius == rhs.radius &&
    lhs.phase == rhs.phase;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::qrotor_firmware::FlatTrajectoryRequest_<ContainerAllocator1> & lhs, const ::qrotor_firmware::FlatTrajectoryRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace qrotor_firmware

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::qrotor_firmware::FlatTrajectoryRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::qrotor_firmware::FlatTrajectoryRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::qrotor_firmware::FlatTrajectoryRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::qrotor_firmware::FlatTrajectoryRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::qrotor_firmware::FlatTrajectoryRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::qrotor_firmware::FlatTrajectoryRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::qrotor_firmware::FlatTrajectoryRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "15191a9c73b67809e5b2cf4690babc5b";
  }

  static const char* value(const ::qrotor_firmware::FlatTrajectoryRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x15191a9c73b67809ULL;
  static const uint64_t static_value2 = 0xe5b2cf4690babc5bULL;
};

template<class ContainerAllocator>
struct DataType< ::qrotor_firmware::FlatTrajectoryRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "qrotor_firmware/FlatTrajectoryRequest";
  }

  static const char* value(const ::qrotor_firmware::FlatTrajectoryRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::qrotor_firmware::FlatTrajectoryRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# set Trajectory type\n"
"uint8 TRAJECTORY_STRAIGHT_LINE = 0\n"
"uint8 TRAJECTORY_CIRCLE_2D = 1\n"
"uint8 TRAJECTORY_CIRCLE_3D = 2\n"
"uint8 TRAJECTORY_ELLIPSE_2D = 3\n"
"uint8 TRAJECTORY_ELLIPSE_3D = 4\n"
"\n"
"uint8 type\n"
"geometry_msgs/Vector3 center\n"
"geometry_msgs/Vector3 radius\n"
"geometry_msgs/Vector3 phase\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::qrotor_firmware::FlatTrajectoryRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::qrotor_firmware::FlatTrajectoryRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.type);
      stream.next(m.center);
      stream.next(m.radius);
      stream.next(m.phase);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FlatTrajectoryRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::qrotor_firmware::FlatTrajectoryRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::qrotor_firmware::FlatTrajectoryRequest_<ContainerAllocator>& v)
  {
    s << indent << "type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.type);
    s << indent << "center: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.center);
    s << indent << "radius: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.radius);
    s << indent << "phase: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.phase);
  }
};

} // namespace message_operations
} // namespace ros

#endif // QROTOR_FIRMWARE_MESSAGE_FLATTRAJECTORYREQUEST_H
