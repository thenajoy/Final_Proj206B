// Generated by gencpp from file qrotor_firmware/Log.msg
// DO NOT EDIT!


#ifndef QROTOR_FIRMWARE_MESSAGE_LOG_H
#define QROTOR_FIRMWARE_MESSAGE_LOG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>

namespace qrotor_firmware
{
template <class ContainerAllocator>
struct Log_
{
  typedef Log_<ContainerAllocator> Type;

  Log_()
    : header()
    , euler()
    , body_rates()
    , linear_acceleration()
    , angular_acceleration()
    , cmd_euler()
    , thrust(0.0)
    , moment()
    , position()
    , velocity()
    , loop_rate(0.0)
    , voltage(0.0)
    , current(0.0)
    , esc_in_us()
    , motors_state(false)
    , control_mode(0)
    , firmware_time(0)
    , attitude_mode(0)
    , lyapunov(0.0)  {
      esc_in_us.assign(0.0);
  }
  Log_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , euler(_alloc)
    , body_rates(_alloc)
    , linear_acceleration(_alloc)
    , angular_acceleration(_alloc)
    , cmd_euler(_alloc)
    , thrust(0.0)
    , moment(_alloc)
    , position(_alloc)
    , velocity(_alloc)
    , loop_rate(0.0)
    , voltage(0.0)
    , current(0.0)
    , esc_in_us()
    , motors_state(false)
    , control_mode(0)
    , firmware_time(0)
    , attitude_mode(0)
    , lyapunov(0.0)  {
  (void)_alloc;
      esc_in_us.assign(0.0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _euler_type;
  _euler_type euler;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _body_rates_type;
  _body_rates_type body_rates;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _linear_acceleration_type;
  _linear_acceleration_type linear_acceleration;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _angular_acceleration_type;
  _angular_acceleration_type angular_acceleration;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _cmd_euler_type;
  _cmd_euler_type cmd_euler;

   typedef double _thrust_type;
  _thrust_type thrust;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _moment_type;
  _moment_type moment;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _position_type;
  _position_type position;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _velocity_type;
  _velocity_type velocity;

   typedef double _loop_rate_type;
  _loop_rate_type loop_rate;

   typedef double _voltage_type;
  _voltage_type voltage;

   typedef double _current_type;
  _current_type current;

   typedef boost::array<double, 4>  _esc_in_us_type;
  _esc_in_us_type esc_in_us;

   typedef uint8_t _motors_state_type;
  _motors_state_type motors_state;

   typedef int32_t _control_mode_type;
  _control_mode_type control_mode;

   typedef uint64_t _firmware_time_type;
  _firmware_time_type firmware_time;

   typedef uint8_t _attitude_mode_type;
  _attitude_mode_type attitude_mode;

   typedef double _lyapunov_type;
  _lyapunov_type lyapunov;





  typedef boost::shared_ptr< ::qrotor_firmware::Log_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::qrotor_firmware::Log_<ContainerAllocator> const> ConstPtr;

}; // struct Log_

typedef ::qrotor_firmware::Log_<std::allocator<void> > Log;

typedef boost::shared_ptr< ::qrotor_firmware::Log > LogPtr;
typedef boost::shared_ptr< ::qrotor_firmware::Log const> LogConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::qrotor_firmware::Log_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::qrotor_firmware::Log_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::qrotor_firmware::Log_<ContainerAllocator1> & lhs, const ::qrotor_firmware::Log_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.euler == rhs.euler &&
    lhs.body_rates == rhs.body_rates &&
    lhs.linear_acceleration == rhs.linear_acceleration &&
    lhs.angular_acceleration == rhs.angular_acceleration &&
    lhs.cmd_euler == rhs.cmd_euler &&
    lhs.thrust == rhs.thrust &&
    lhs.moment == rhs.moment &&
    lhs.position == rhs.position &&
    lhs.velocity == rhs.velocity &&
    lhs.loop_rate == rhs.loop_rate &&
    lhs.voltage == rhs.voltage &&
    lhs.current == rhs.current &&
    lhs.esc_in_us == rhs.esc_in_us &&
    lhs.motors_state == rhs.motors_state &&
    lhs.control_mode == rhs.control_mode &&
    lhs.firmware_time == rhs.firmware_time &&
    lhs.attitude_mode == rhs.attitude_mode &&
    lhs.lyapunov == rhs.lyapunov;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::qrotor_firmware::Log_<ContainerAllocator1> & lhs, const ::qrotor_firmware::Log_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace qrotor_firmware

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::qrotor_firmware::Log_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::qrotor_firmware::Log_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::qrotor_firmware::Log_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::qrotor_firmware::Log_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::qrotor_firmware::Log_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::qrotor_firmware::Log_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::qrotor_firmware::Log_<ContainerAllocator> >
{
  static const char* value()
  {
    return "479e80fd954016432b0609f599bc1f43";
  }

  static const char* value(const ::qrotor_firmware::Log_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x479e80fd95401643ULL;
  static const uint64_t static_value2 = 0x2b0609f599bc1f43ULL;
};

template<class ContainerAllocator>
struct DataType< ::qrotor_firmware::Log_<ContainerAllocator> >
{
  static const char* value()
  {
    return "qrotor_firmware/Log";
  }

  static const char* value(const ::qrotor_firmware::Log_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::qrotor_firmware::Log_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Quadrotor Onboard Log \n"
"std_msgs/Header         header\n"
"geometry_msgs/Vector3   euler\n"
"geometry_msgs/Vector3   body_rates\n"
"geometry_msgs/Vector3   linear_acceleration\n"
"geometry_msgs/Vector3   angular_acceleration\n"
"geometry_msgs/Vector3   cmd_euler\n"
"float64                 thrust\n"
"geometry_msgs/Vector3   moment\n"
"geometry_msgs/Vector3   position\n"
"geometry_msgs/Vector3   velocity\n"
"float64                 loop_rate\n"
"float64                 voltage\n"
"float64                 current\n"
"float64[4]              esc_in_us\n"
"bool                    motors_state\n"
"int32                   control_mode\n"
"uint64                  firmware_time\n"
"uint8                   attitude_mode\n"
"float64                 lyapunov\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::qrotor_firmware::Log_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::qrotor_firmware::Log_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.euler);
      stream.next(m.body_rates);
      stream.next(m.linear_acceleration);
      stream.next(m.angular_acceleration);
      stream.next(m.cmd_euler);
      stream.next(m.thrust);
      stream.next(m.moment);
      stream.next(m.position);
      stream.next(m.velocity);
      stream.next(m.loop_rate);
      stream.next(m.voltage);
      stream.next(m.current);
      stream.next(m.esc_in_us);
      stream.next(m.motors_state);
      stream.next(m.control_mode);
      stream.next(m.firmware_time);
      stream.next(m.attitude_mode);
      stream.next(m.lyapunov);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Log_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::qrotor_firmware::Log_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::qrotor_firmware::Log_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "euler: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.euler);
    s << indent << "body_rates: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.body_rates);
    s << indent << "linear_acceleration: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.linear_acceleration);
    s << indent << "angular_acceleration: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.angular_acceleration);
    s << indent << "cmd_euler: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.cmd_euler);
    s << indent << "thrust: ";
    Printer<double>::stream(s, indent + "  ", v.thrust);
    s << indent << "moment: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.moment);
    s << indent << "position: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "velocity: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.velocity);
    s << indent << "loop_rate: ";
    Printer<double>::stream(s, indent + "  ", v.loop_rate);
    s << indent << "voltage: ";
    Printer<double>::stream(s, indent + "  ", v.voltage);
    s << indent << "current: ";
    Printer<double>::stream(s, indent + "  ", v.current);
    s << indent << "esc_in_us[]" << std::endl;
    for (size_t i = 0; i < v.esc_in_us.size(); ++i)
    {
      s << indent << "  esc_in_us[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.esc_in_us[i]);
    }
    s << indent << "motors_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.motors_state);
    s << indent << "control_mode: ";
    Printer<int32_t>::stream(s, indent + "  ", v.control_mode);
    s << indent << "firmware_time: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.firmware_time);
    s << indent << "attitude_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.attitude_mode);
    s << indent << "lyapunov: ";
    Printer<double>::stream(s, indent + "  ", v.lyapunov);
  }
};

} // namespace message_operations
} // namespace ros

#endif // QROTOR_FIRMWARE_MESSAGE_LOG_H
